/* eslint-disable import/no-anonymous-default-export */
import React, { useState, useRef, useEffect } from "react";

import Grid from '../grid/Grid.jsx';
import { Cell } from '../gridItem/Cell.jsx';
import ControlBar from '../controlBar/ControlBar';
import { Box } from "@material-ui/core";


const generateEmptyGrid = (numRows, numCols) => {
    let rows = [];
    for (let row = 0; row < numRows; row++) {
        let row = []
        for (let col = 0; col < numCols; col++) {
            row.push (
                new Cell(row, col, 0)
            )
        }
        rows.push(row)
    }
    return rows;
};


export default ({
    numRows,
    numCols
}) => {
    const [ grid, setGrid ] = useState(() => (
        generateEmptyGrid(numRows, numCols)
    ));
    const [running, setRunning] = useState(false);

    const runningRef = useRef(running);
    runningRef.current = running;

    const numRowsRef = useRef(numRows);
    const numColsRef = useRef(numCols);

    numRowsRef.current = numRows;
    numColsRef.current = numCols;

    useEffect(() => {
        setGrid(generateEmptyGrid(numRows, numCols))
        numRowsRef.current = numRows;
        numColsRef.current = numCols;
    }, [ numRows, numCols ]);    




    return (<>
        <Box
            display="flex"
            justifyContent="center"
            alignItems="center"
        >
            <div style={{
                width: '45%',
                margin: '10px'
            }}>
                <ControlBar 
                    numRowsRef={numRowsRef} 
                    numColsRef={numColsRef} 
                    running={running} 
                    runningRef={runningRef} 
                    setRunning={setRunning} 
                    setGrid={setGrid} 
                    generateEmptyGrid={generateEmptyGrid}  
                />

            </div>
        </Box>
        
        <Box
            display="flex"
            justifyContent="center"
            alignItems="center"
        >
            <div style={{
                border: `5px solid grey`, 
                padding: 0,
                width: 'fit-content', 
                height: 'fit-content', 
            }}>
                <Grid 
                    numRows={numRows}
                    numCols={numCols}
                    grid={grid}
                    gridClick={(row, col) => {
                        setGrid(old => {
                            let grid = old.map(row => (
                                row.map(col => (
                                    col
                                ))
                            ));
                            grid[row][col].state 
                            
                            
                            
                            = !grid[row][col].state;
                            return grid;
                        });
                    }}
                />
            </div>

        </Box>
    </>)
}
